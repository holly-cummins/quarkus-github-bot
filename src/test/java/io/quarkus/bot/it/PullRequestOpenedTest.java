package io.quarkus.bot.it;

import io.quarkiverse.githubapp.testing.GitHubAppTest;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.kohsuke.github.GHEvent;
import org.kohsuke.github.GHPullRequestFileDetail;
import org.kohsuke.github.PagedIterable;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;

import static io.quarkiverse.githubapp.testing.GitHubAppTesting.given;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

@QuarkusTest
@GitHubAppTest
@ExtendWith(MockitoExtension.class)
public class PullRequestOpenedTest {

    @Test
    void titleEndsWithDot() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-ends-with-dot.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should not end up with dot\n" +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleStartsWithLowercase() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-starts-with-lowercase.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should preferably start with an uppercase character (if it makes sense!)\n" +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleStartsWithgRPC() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-starts-with-gRPC.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleContainsIssueNumber() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-contains-issue-number.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should not contain an issue number (use `Fix #1234` in the description instead)\n"
                                    +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleStartsWithFeat() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-starts-with-feat.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should preferably start with an uppercase character (if it makes sense!)\n" +
                                    "- title should not start with chore/docs/feat/fix/refactor but be a proper sentence\n" +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleStartsWithFix() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-starts-with-fix.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should preferably start with an uppercase character (if it makes sense!)\n" +
                                    "- title should not start with chore/docs/feat/fix/refactor but be a proper sentence\n" +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleStartsWithChore() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-starts-with-chore.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should preferably start with an uppercase character (if it makes sense!)\n" +
                                    "- title should not start with chore/docs/feat/fix/refactor but be a proper sentence\n" +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void titleStartsWithDocs() throws IOException {
        given().github(mocks -> mocks.configFileFromString(
                "quarkus-github-bot.yml",
                "features: [ CHECK_EDITORIAL_RULES ]\n"))
                .when().payloadFromClasspath("/pullrequest-opened-title-starts-with-docs.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("Thanks for your pull request!\n" +
                                    "\n" +
                                    "The title of your pull request does not follow our editorial rules. Could you have a look?\n"
                                    +
                                    "\n" +
                                    "- title should preferably start with an uppercase character (if it makes sense!)\n" +
                                    "- title should not start with chore/docs/feat/fix/refactor but be a proper sentence\n" +
                                    "\n" +
                                    "> This message is automatically generated by a bot.");
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void triageFromChangedFiles() throws IOException {
        given()
                .github(mocks -> {
                    mocks.configFileFromString(
                            "quarkus-github-bot.yml",
                            """
                                    features: [ TRIAGE_ISSUES_AND_PULL_REQUESTS ]
                                    triage:
                                      rules:
                                        - directories:
                                            - foo/*
                                            - bar/*
                                          labels: [area/test1, area/test2]
                                        - title: keyword
                                          directories:
                                            - foobar
                                          labels: [area/test3]""");
                    PagedIterable<GHPullRequestFileDetail> changedFilesMocks = MockHelper.mockPagedIterable(
                            MockHelper.mockGHPullRequestFileDetail("foo/Something.java"),
                            MockHelper.mockGHPullRequestFileDetail("something/foobar/SomethingElse.java"));
                    when(mocks.pullRequest(527350930).listFiles())
                            .thenReturn(changedFilesMocks);
                })
                .when().payloadFromClasspath("/pullrequest-opened-title-contains-keyword.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .addLabels("area/test1", "area/test2");
                    verify(mocks.pullRequest(527350930), times(2)).listFiles();
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void triageFromDescription() throws IOException {
        given()
                .github(mocks -> {
                    mocks.configFileFromString(
                            "quarkus-github-bot.yml",
                            """
                                    features: [ TRIAGE_ISSUES_AND_PULL_REQUESTS ]
                                    triage:
                                      rules:
                                        - title: keyword
                                          directories:
                                            - foo/*
                                            - bar/*
                                          labels: [area/test1, area/test2]
                                        - title: somethingelse
                                          directories:
                                            - foobar
                                          labels: [area/test3]""");
                    PagedIterable<GHPullRequestFileDetail> changedFilesMock = MockHelper.mockPagedIterable(
                            MockHelper.mockGHPullRequestFileDetail("pom.xml"));
                    when(mocks.pullRequest(527350930).listFiles())
                            .thenReturn(changedFilesMock);
                })
                .when().payloadFromClasspath("/pullrequest-opened-title-contains-keyword.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .addLabels("area/test1", "area/test2");
                    verify(mocks.pullRequest(527350930), times(2)).listFiles();
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void triageFromChangedFilesAndDescription() throws IOException {
        given()
                .github(mocks -> {
                    mocks.configFileFromString(
                            "quarkus-github-bot.yml",
                            """
                                    features: [ TRIAGE_ISSUES_AND_PULL_REQUESTS ]
                                    triage:
                                      rules:
                                        - title: keyword
                                          directories:
                                            - foo/*
                                            - bar/*
                                          labels: [area/test1, area/test2]
                                        - title: somethingelse
                                          directories:
                                            - foobar
                                          labels: [area/test3]
                                          allowSecondPass: true""");
                    PagedIterable<GHPullRequestFileDetail> changedFilesMocks = MockHelper.mockPagedIterable(
                            MockHelper.mockGHPullRequestFileDetail("foobar/pom.xml"));
                    when(mocks.pullRequest(527350930).listFiles())
                            .thenReturn(changedFilesMocks);
                })
                .when().payloadFromClasspath("/pullrequest-opened-title-contains-keyword.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .addLabels("area/test1", "area/test2", "area/test3");
                    verify(mocks.pullRequest(527350930), times(2)).listFiles();
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }

    @Test
    void triageComment() throws IOException {
        given()
                .github(mocks -> {
                    mocks.configFileFromString(
                            "quarkus-github-bot.yml",
                            """
                                    features: [ TRIAGE_ISSUES_AND_PULL_REQUESTS ]
                                    triage:
                                      rules:
                                        - directories:
                                            - foo
                                            - bar
                                          comment: 'This is an urgent PR'""");
                    PagedIterable<GHPullRequestFileDetail> changedFilesMocks = MockHelper.mockPagedIterable(
                            MockHelper.mockGHPullRequestFileDetail("foo/Something.java"));
                    when(mocks.pullRequest(527350930).listFiles())
                            .thenReturn(changedFilesMocks);
                })
                .when().payloadFromClasspath("/pullrequest-opened-title-does-not-contain-keyword.json")
                .event(GHEvent.PULL_REQUEST)
                .then().github(mocks -> {
                    verify(mocks.pullRequest(527350930))
                            .comment("This is an urgent PR");
                    verify(mocks.pullRequest(527350930)).listFiles();
                    verifyNoMoreInteractions(mocks.ghObjects());
                });
    }
}
